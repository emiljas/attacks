<!DOCTYPE html>
<html>
  <head>
    <link rel='stylesheet' href='/stylesheets/style.css' />
    <meta charset='utf-8' />
    <link rel="stylesheet" href="highlightjs/styles/default.css" />
    <script src="highlightjs/highlight.pack.js"></script>
  </head>
  <body>
    <main>

      <div id="manual" class="form visible round">
        <div class="slide slide-intro hide">
          <p>OK, możemy zaczynać?</p>
          <p>W tym polu będą się wyświetlały instrukcję, które należy wykonać.</p>
          <p>Ich wykonanie pozwoli ci zaznajomić się z najczęstszymi atakami stosowanymi na stronach internetowych.</p>
          <p>Jeśli w przyszłości masz zamiar napisać jakikolwiek kawałek kodu wykonywanego w przeglądarce lub na serwerze powinieneś o nich wiedzieć.</p>
        </div>

        <div class="slide slide-basicInformation hide">
          <p>
            Użyj przeglądarki Google Chrome.
          </p>
          <p>
            Kod aplikacji, którą właśnie używasz została napisana wyłącznie w języku JavaScript. Zarówno część wykonywana w przeglądarce, jak i na serwerze.
          </p>
          <p>
            Gdy zmienisz kod wykonywany po stronie przeglądarki wystarczy, że odświeżysz stronę.
          </p>
          <p>
            Gdy zmienisz kod wykonywany po stronie serwera uruchom ponownie aplikację.
          </p>
          </p>
        </div>

        <div class="slide slide-sqlInjection">
          <p>
            Pierwszy atak, które wykonasz to <span class="important">SqlInjection</span>.
          </p>
          <p>
            Załóżmy, że poniższy ekran to prawdziwa aplikacja, w której Lena zarządza swoimi notatkami.<br />
            Lena wie, że z tej samej aplikacji korzysta również Oliwia.<br />
            Aplikacja udostępnia funkcję filtrowania. W tym celu wykonywane jest zapytanie, które jest wyświetlane pod notatkami.<br />
            Spróbuj teraz wylistować wszystkie notatki.
          </p>
        </div>

        <div class="rightBtns">
          <input class="back" type="button" value="Wstecz" />
          <input id="dbResetBtn" type="button" value="Przywróć bazę do stanu początkowego" />
          <input class="next" type="button" value="Dalej" />
        </div>
      </div>

      <script>
      var $ = document.querySelector.bind(document);
      var $$ = document.querySelectorAll.bind(document);

      (function() {
        var backBtn = $("#manual .back");
        var nextBtn = $("#manual .next");

        var currentStepsIndex = 0;

        var steps = [
          {
            name: "intro"
          },
          {
            name: "basicInformation"
          },
          {
            name: "sqlInjection",
            isSolution: true,
            init: function() {
              var notesListContainer = $("#notesList");
              notesListContainer.classList.add("visible");
            }
          }
        ];

        backBtn.addEventListener("click", function() {
          if(currentStepsIndex - 1 >= 0)
            loadStep(currentStepsIndex - 1);
        }, false);

        nextBtn.addEventListener("click", function() {
          if(currentStepsIndex + 1 < steps.length)
            loadStep(currentStepsIndex + 1);
        }, false);

        function loadStep(index) {
          setStep(index);

          var slides = $$(".slide")
          for(var i = 0; i < slides.length; i++) {
            var slide = slides[i];
            slide.classList.add("hide");
          }

          var step = steps[currentStepsIndex];

          $(".slide.slide-" + step.name).classList.remove("hide");
          if("init" in step)
            step.init();

          // showManual(1);
        }

        function setStep(index) {
          currentStepsIndex = index;

          if(currentStepsIndex == 0)
            backBtn.setAttribute("disabled", "disabled");
          else
            backBtn.removeAttribute("disabled", "disabled");

          if(currentStepsIndex == steps.length - 1)
            nextBtn.setAttribute("disabled", "disabled");
          else
            nextBtn.removeAttribute("disabled");
        }

        loadStep(currentStepsIndex);
      })();
      </script>

      <div id="addNote" class="form">
        <form>
          <h1>Nowa notatka</h1>
          <div class="table">
            <div class="row">
              <div class="cell"><label for="addNoteTitle">tytuł: </label></div>
              <div class="cell"><input id="addNoteTitle" class="title" type="text" /></div>
            </div>
            <div class="row">
              <div class="cell"><label for="addNoteContent">treść: </label></div>
              <div class="cell"><input id="addNoteContent" class="content" type="text" /></div>
            </div>
          </div>
          <div class="rightBtns">
            <input class="submit" type="submit" value="dodaj" />
          </div>
        </form>
      </div>

      <div id="notesList" class="form">
        <h1>Notatki Leny</h1>

        <label>
          szukaj:
          <input class="searcher" type="text" autofocus />
        </label>

        <div class="notes"></div>

        <p>
          podgląd zapytania sql:
          <pre><code class="sqlQuery" class="sql"></code></pre>
        </p>
      </div>
    </main>

    <script>
    var utils = (function() {
      function gettingJson(url) {
        return new Promise(function(resolve) {
          var req = new XMLHttpRequest();
          req.open("get", url, true);
          req.setRequestHeader('Content-type', 'application/x-www-form-urlencoded; charset=utf-8')
          req.onreadystatechange = function () {
            if (req.readyState == 4) {
              if(req.status == 200)
                var ret= JSON.parse(req.responseText);
                resolve(ret);
            }
          };
          req.send(null)
        });
      }

      function posting(url, data) {
        var formData = new FormData();
        for(var property in data) {
          if(data.hasOwnProperty(property))
            formData.append(property, data[property]);
        }

        return new Promise(function(resolve) {
          var req = new XMLHttpRequest();
          req.open("post", url, true);

          req.onreadystatechange = function () {
            if (req.readyState == 4) {
              if(req.status == 200)
                resolve();
            }
          };
          req.send(formData);
        });
      }

      return {
        gettingJson: gettingJson,
        posting: posting
      };
    })();

    (function() {
      var dbResetBtn = $("#dbResetBtn");

      dbResetBtn.addEventListener("click", function() {
        utils.gettingJson("/resetDb")
        .then(function() {
          notesList.filterNotes("");
        });
      }, false);
    })();

    var notesList = (function() {
      var noteTitleInput = $("#notesList .searcher")
      var notesDiv = $("#notesList .notes");
      var sqlQueryCode = $("#notesList .sqlQuery");

      noteTitleInput.addEventListener("input", function(e) {
        var input = e.target.value;
        filterNotes(input);
      });

      function filterNotes(input) {
        var url = "/notes/filter?input=" + encodeURIComponent(input);
        utils.gettingJson(url)
        .then(function(ret) {
          renderNotes(ret.notes);
          renderSqlQuery(ret.sqlQuery);
        });
      }

      function renderSqlQuery(query) {
        sqlQueryCode.textContent = query;
        hljs.highlightBlock(sqlQueryCode);
      }

      function renderNotes(notes) {
        notesDiv.innerHTML = "";
        notes.forEach(function(note) {
          renderNote(note);
        });
      }

      function renderNote(note) {
        var noteDiv = document.createElement("div");
        noteDiv.style.backgroundColor = "#" + note.colorRGB;
        noteDiv.className = "note round";

        var titleP = document.createElement("p");
        titleP.className = "title";
        titleP.innerHTML = note.title;

        var contentP = document.createElement("p");
        contentP.className = "content";
        contentP.innerHTML = note.content;

        noteDiv.appendChild(titleP);
        noteDiv.appendChild(contentP);

        notesDiv.appendChild(noteDiv);
      }

      filterNotes("");

      return {
        filterNotes: filterNotes
      };
    })();

    (function() {
      var submitBtn = $("#addNote .submit");
      var titleInput = $("#addNote .title");
      var contentInput = $("#addNote .content");

      submitBtn.addEventListener("click", function(event) {
        event.preventDefault();

        addNote(titleInput.value, contentInput.value);
        titleInput.value = "";
        contentInput.value = "";
      }, false);

      function addNote(title, content) {
        utils.posting("/notes/add", {
          title: title,
          content: content
        })
        .then(function() {
          notesList.filterNotes("");
        });
      }
    })();
    </script>
  </body>
</html>
