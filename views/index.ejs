<!DOCTYPE html>
<html>
  <head>
    <link rel='stylesheet' href='/stylesheets/style.css' />
    <meta charset='utf-8' />
    <link rel="stylesheet" href="highlightjs/styles/default.css" />
    <script src="highlightjs/highlight.pack.js"></script>
  </head>
  <body>
    <main>
      <div id="manual" class="form visible round">
        <div class="slide"></div>

        <div class="rightBtns">
          <button class="back" />
          <button id="dbResetBtn">przywróć bazę do stanu początkowego</button>
          <button class="next" />
        </div>
      </div>

      <div id="addNote" class="form">
        <form>
          <h1>Nowa notatka</h1>
          <div class="table">
            <div class="row">
              <div class="cell"><label for="addNoteTitle">tytuł: </label></div>
              <div class="cell"><input id="addNoteTitle" class="title" type="text" /></div>
            </div>
            <div class="row">
              <div class="cell"><label for="addNoteContent">treść: </label></div>
              <div class="cell"><input id="addNoteContent" class="content" type="text" /></div>
            </div>
          </div>
          <div class="rightBtns">
            <input class="submit" type="submit" value="dodaj" />
          </div>
        </form>
      </div>

      <div id="notesList" class="form">
        <h1>Notatki Leny</h1>

        <label>
          szukaj:
          <input class="searcher" type="text" autofocus />
        </label>

        <div class="notes"></div>

        <p>
          podgląd zapytania sql:
          <pre><code class="sqlQuery" class="sql"></code></pre>
        </p>
      </div>
    </main>

    <script>
    var $ = document.querySelector.bind(document);
    var $$ = document.querySelectorAll.bind(document);

    var utils = (function() {
      function gettingJson(url) {
        return new Promise(function(resolve) {
          var req = new XMLHttpRequest();
          req.open("get", url, true);
          req.setRequestHeader('Content-type', 'application/x-www-form-urlencoded; charset=utf-8')
          req.onreadystatechange = function () {
            if (req.readyState == 4) {
              if(req.status == 200)
                var ret= JSON.parse(req.responseText);
                resolve(ret);
            }
          };
          req.send(null)
        });
      }

      function posting(url, data) {
        var formData = new FormData();
        for(var property in data) {
          if(data.hasOwnProperty(property))
            formData.append(property, data[property]);
        }

        return new Promise(function(resolve) {
          var req = new XMLHttpRequest();
          req.open("post", url, true);

          req.onreadystatechange = function () {
            if (req.readyState == 4) {
              if(req.status == 200)
                resolve();
            }
          };
          req.send(formData);
        });
      }

      function gettingFile(url) {
        return new Promise(function(resolve) {
          var req = new XMLHttpRequest();
          req.open("get", url, true);

          req.onreadystatechange = function () {
            if (req.readyState == 4) {
              if(req.status == 200)
                resolve(req.response);
            }
          };
          req.send(null);
        });
      }

      return {
        gettingJson: gettingJson,
        posting: posting,
        gettingFile
      };
    })();
    </script>
    <script>
    (function() {
      var dbResetBtn = $("#dbResetBtn");

      dbResetBtn.addEventListener("click", function() {
        utils.gettingJson("/resetDb")
        .then(function() {
          notesList.filterNotes("");
        });
      }, false);
    })();

    var notesList = (function() {
      var noteTitleInput = $("#notesList .searcher")
      var notesDiv = $("#notesList .notes");
      var sqlQueryCode = $("#notesList .sqlQuery");

      noteTitleInput.addEventListener("input", function(e) {
        var input = e.target.value;
        filterNotes(input);
      });

      function filterNotes(input) {
        var url = "/notes/filter?input=" + encodeURIComponent(input);
        utils.gettingJson(url)
        .then(function(ret) {
          renderNotes(ret.notes);
          renderSqlQuery(ret.sqlQuery);
        });
      }

      function renderSqlQuery(query) {
        sqlQueryCode.textContent = query;
        hljs.highlightBlock(sqlQueryCode);
      }

      function renderNotes(notes) {
        notesDiv.innerHTML = "";
        notes.forEach(function(note) {
          renderNote(note);
        });
      }

      function renderNote(note) {
        var noteDiv = document.createElement("div");
        noteDiv.style.backgroundColor = "#" + note.colorRGB;
        noteDiv.className = "note round";

        var titleP = document.createElement("p");
        titleP.className = "title";
        titleP.innerHTML = note.title;

        var contentP = document.createElement("p");
        contentP.className = "content";
        contentP.innerHTML = note.content;

        noteDiv.appendChild(titleP);
        noteDiv.appendChild(contentP);

        notesDiv.appendChild(noteDiv);
      }

      filterNotes("");

      return {
        filterNotes: filterNotes
      };
    })();

    (function() {
      var submitBtn = $("#addNote .submit");
      var titleInput = $("#addNote .title");
      var contentInput = $("#addNote .content");

      submitBtn.addEventListener("click", function(event) {
        event.preventDefault();

        addNote(titleInput.value, contentInput.value);
        titleInput.value = "";
        contentInput.value = "";
      }, false);

      function addNote(title, content) {
        utils.posting("/notes/add", {
          title: title,
          content: content
        })
        .then(function() {
          notesList.filterNotes("");
        });
      }
    })();
    </script>
    <script>
    (function() {
      var slideDiv = $("#manual .slide");
      var backBtn = $("#manual .back");
      var nextBtn = $("#manual .next");

      function getCurrentStepsIndex() {
        var item = localStorage.getItem("currentStepsIndex");
        if(item)
          return parseInt(item);
        return null;
      }

      if(!getCurrentStepsIndex())
        localStorage.setItem("currentStepsIndex", 0);

      var steps = [
        {
          fileName: "htmls/intro.html"
        },
        {
          fileName: "htmls/sqlInjection.html",
          init: function() {
            var notesListContainer = $("#notesList");
            notesListContainer.classList.add("visible");
          }
        },
        {
          fileName: "htmls/sqlInjectionSolution.html",
          customNextLabel: "<span class='warning'>rozwiązanie</span>"
        },
        {
          fileName: "htmls/deleteNotes.html"
        },
        {
          fileName: "htmls/deleteNotesSolution.html",
          customNextLabel: "<span class='warning'>rozwiązanie</span>"
        },
        {
          fileName: "htmls/preventSqlInjectionByDisableMultipleStatements.html"
        },
        {
          fileName: "htmls/preventSqlInjectionByEscape.html"
        },
        {
          fileName: "htmls/addNoteForm.html",
          init: function() {
            var addNoteContainer = $("#addNote");
            addNoteContainer.classList.add("visible");
          }
        },
        {
          fileName: "htmls/setUpMaliciousSite.html"
        },
        {
          fileName: "htmls/preventCSRF.html"
        },
        {
          fileName: "htmls/XSS.html"
        },
        {
          fileName: "htmls/XSSImplications.html"
        }
      ];

      backBtn.addEventListener("click", function() {
        if(getCurrentStepsIndex() - 1 >= 0)
          loadStep(getCurrentStepsIndex() - 1);
      }, false);

      nextBtn.addEventListener("click", function() {
        if(getCurrentStepsIndex() + 1 < steps.length)
          loadStep(getCurrentStepsIndex() + 1);
      }, false);

      function loadStep(index) {
        setStep(index);

        var step = steps[getCurrentStepsIndex()];

        utils.gettingFile(step.fileName)
        .then(function(content) {
          slideDiv.innerHTML = content;
        });

        if("init" in step)
          step.init();

        var nextStep = getNextStep();
        if(nextStep && nextStep.customNextLabel)
          nextBtn.innerHTML = nextStep.customNextLabel;
        else
          nextBtn.innerHTML = "dalej";

        backBtn.innerHTML = "wstecz";
      }

      function getNextStep() {
        if(getCurrentStepsIndex() < steps.length - 1)
          return steps[getCurrentStepsIndex() + 1];
        return null;
      }

      function setStep(index) {
        localStorage.setItem("currentStepsIndex", index);

        if(getCurrentStepsIndex() == 0)
          backBtn.setAttribute("disabled", "disabled");
        else
          backBtn.removeAttribute("disabled", "disabled");

        if(getCurrentStepsIndex() == steps.length - 1)
          nextBtn.setAttribute("disabled", "disabled");
        else
          nextBtn.removeAttribute("disabled");
      }

      loadStep(getCurrentStepsIndex());
      for(var i = 0; i < getCurrentStepsIndex(); i++) {
        var step = steps[i];
        if("init" in step)
          step.init();
      }
    })();
    </script>
  </body>
</html>
